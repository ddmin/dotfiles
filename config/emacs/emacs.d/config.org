#+TITLE: Emacs Configuration
#+CREATOR: ddmin
#+LANGUAGE: en
#+STARTUP: show2levels
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

[[./img/logo-small.png]]

* General Settings

** Disable menu bar, scroll bar, tool bar

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+end_src

** Remove startup screen

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Enable clipboard

#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t)
#+end_src

** Scrolling

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
  (setq evil-want-C-u-scroll t)
#+end_src

** Set UTF-8 encoding

#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

** Disable backups

#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+end_src

** Show parentheses

Highlight matching parentheses.
#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** Turn off bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Prompt with y-n-or-p

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Show Lines and Columns in modeline

#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src

** Relative Line Numbers

#+begin_src emacs-lisp
(global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+end_src

** Kill current buffer

#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+end_src

** Kill all buffers

#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-x C-k") 'kill-all-buffers)
#+end_src

** ibuffer

Use ibuffer instead of switch-to-buffer.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

** Highlight line

Enable =hl-line= in the GUI version of emacs.
#+begin_src emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+end_src

** Shell

#+begin_src emacs-lisp
  (defvar default-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list default-shell)))
  (ad-activate 'ansi-term)
#+end_src


* Packages

** Electric Pairs

#+begin_src emacs-lisp
  (setq electric-pair-pairs '(
                             (?\{ . ?\})
                             (?\( . ?\))
                             (?\[ . ?\])
                             (?\" . ?\")
                             ))
  (electric-pair-mode t)
#+end_src

** Which-Key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src

** Key Chord

#+begin_src emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1))
#+end_src

** Swiper

Easy searching in current buffer.
#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-c f" . 'swiper))
#+end_src

** UndoTree

Required for undo in e-vi-l mode.
#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode))
#+end_src

** E-Vi-L Mode

The superior keybindings.
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-tree))
#+end_src

** Beacon

#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+end_src

** Pretty Symbols

#+begin_src emacs-lisp
  (use-package pretty-mode
    :ensure t
    :config
    (global-pretty-mode t))
  (require 'pretty-mode)
#+end_src

** Dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/img/logo-small.png")
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-banner-logo-title "Welcome to emacs!"))
#+end_src

** Company

Auto-completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    :init
    (add-hook 'after-init-hook 'global-company-mode))
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-k") #'company-select-next)
    (define-key company-active-map (kbd "C-j") #'company-select-previous))
#+end_src


* Org-mode

** Basic Configuration

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Org Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

** Enable inline images

#+begin_src emacs-lisp
  (setq org-startup-with-inline-images t)
#+end_src


* IDO

** enable ido mode

#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

** ido-vertical

#+begin_src emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
#+end_src

** smex

#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src


* Theme

** Gruber Darker

#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :ensure t)
  (load-theme 'gruber-darker t)
#+end_src


* Keybindings

** E-Vi-L normal mode

#+begin_src emacs-lisp
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
#+end_src
