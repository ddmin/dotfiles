#+STARTUP: overview
#+TITLE: Emacs Configuration
#+CREATOR: ddmin
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

[[./img/logo-small.png]]

* General Settings
** Disable menu bar, scroll bar, tool bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

** Remove startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Enable clipboard
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC

** Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
  (setq evil-want-C-u-scroll t)
#+END_SRC

** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** Disable backups
#+BEGIN_SRC emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

** Show parentheses
Highlight matching parentheses.
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Turn off bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Prompt with y-n-or-p
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Relative Line Numbers
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
#+END_SRC

** Highlight line
Enable =hl-line= in the GUI version of emacs.
#+BEGIN_SRC emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

** Shell
#+BEGIN_SRC emacs-lisp
  (defvar default-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list default-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* Packages

** Electric Pairs
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                             (?\{ . ?\})
                             (?\( . ?\))
                             (?\[ . ?\])
                             (?\" . ?\")
                             ))
  (electric-pair-mode t)
#+END_SRC

** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** Key Chord
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1))
#+END_SRC

** UndoTree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode))
#+END_SRC

** E-Vi-L Mode
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-tree))
#+END_SRC

** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

** Pretty Symbols
#+BEGIN_SRC emacs-lisp
(when window-system
      (use-package pretty-mode
      :ensure t
      :config
      (global-pretty-mode t)))
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/img/logo-small.png")
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-banner-logo-title "Welcome to emacs!"))
#+END_SRC

* Org-mode
** Enable inline images
#+BEGIN_SRC emacs-lisp
  (setq org-startup-with-inline-images t)
#+END_SRC

* Theme

** Gruber Darker
#+BEGIN_SRC emacs-lisp
  (use-package gruber-darker-theme
    :ensure t)
  (load-theme 'gruber-darker t)
#+END_SRC

* Keybindings

** E-Vi-l normal mode
#+BEGIN_SRC emacs-lisp
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
#+END_SRC
