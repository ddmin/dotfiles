" __   _(_)_ __ ___  _ __ ___
" \ \ / / | '_ ` _ \| '__/ __|
"  \ V /| | | | | | | | | (__
"   \_/ |_|_| |_| |_|_|  \___|

" Plugins {{{

" Automatically download Plugged if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins using Plugged
call plug#begin('~/.vim/plugged')

    if has('nvim')
        " nvim-treesitter
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

        " autopairs
        Plug 'windwp/nvim-autopairs'
    endif

" YCM
    Plug 'Valloric/YouCompleteMe', { 'do': './install.py --all'}

" NERDtree
    Plug 'preservim/nerdtree'

" emmet
    Plug 'mattn/emmet-vim', { 'for': 'html,css,javascript,typescript' }

" CSS color
    Plug 'ap/vim-css-color'

" vim-surround
    Plug 'tpope/vim-surround'

" vim-commentary
    Plug 'tpope/vim-commentary'

" vim-repeat
    Plug 'tpope/vim-repeat'

" fzf
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'

" goyo
    Plug 'junegunn/goyo.vim'

" limelight
    Plug 'junegunn/limelight.vim', { 'for': 'markdown' }

" undotree
    Plug 'mbbill/undotree'

" rooter
    Plug 'airblade/vim-rooter'

" one dark
    Plug 'joshdick/onedark.vim'

" vim-airline
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

" vim-devicons
    Plug 'ryanoasis/vim-devicons'

call plug#end()

" }}}

" Basics {{{

    let mapleader = " "
    inoremap jk <ESC>

    set number
    set relativenumber
    set ignorecase
    set smartcase

    set encoding=utf-8
    set showcmd

    syntax on
    filetype plugin on
    filetype indent on

    set wrap
    set updatetime=300
    set redrawtime=10000
    set lazyredraw

    set wildmenu
    set wildmode=longest:full,full

" Undo Directory
    set hidden
    set noswapfile
    set nobackup
    set undodir=~/.vim/undodir
    set undofile

" Tabs
    set list
    set expandtab
    set tabstop=4
    set shiftwidth=4
    set softtabstop=4
    set autoindent
    set showbreak=↪\
    set listchars=trail:∙,nbsp:•

" Highlight searches and <Leader><Leader> to unhighlight
    set incsearch
    set hlsearch
    nnoremap <silent> <leader><leader> :nohl<CR><C-l>

"Disable auto-commenting
    autocmd FileType * setlocal formatoptions-=c formatoptions-=o

" Remove trailing white space on save
    autocmd BufWritePre * %s/\s\+$//e

" Terminal
    map <Leader>t :term<CR>:setlocal nonumber norelativenumber<CR>
    tnoremap <C-w> <C-\><C-n>
    au BufEnter * silent! if &buftype == 'terminal' | :startinsert | endif

    if has('nvim')
        au TermClose * silent! :q!
    endif

" }}}

" Aesthetics {{{

" Set airline theme
    set t_Co=256

    let g:airline_powerline_fonts = 1
    let g:airline_theme='powerlineish'

    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

" colors
    function! s:patch_colors()
        hi Normal guibg=NONE ctermbg=NONE
        hi Comment ctermfg=magenta
        hi LineNr ctermfg=lightblue
        hi CursorLineNr ctermfg=darkmagenta
        hi Folded ctermbg=magenta
        hi Search cterm=NONE ctermfg=black ctermbg=lightblue
    endfunction

    autocmd! ColorScheme onedark call s:patch_colors()
    colorscheme onedark

" }}}

" Bindings {{{

" open folds
    nnoremap <CR> za

" increment number
    nnoremap <C-p> <C-a>

" toggle numbers
    nmap <silent> <leader>n :set invnumber<CR>:set invrelativenumber<CR>

" toggle spell
    nnoremap <silent> <leader>s :set invspell spelllang=en_us<cr>

" yank to end of line
    nnoremap Y y$

" Reselect visual after idents
    vnoremap < <gv
    vnoremap > >gv

" undo breakpoints
    inoremap , ,<c-g>u
    inoremap . .<c-g>u
    inoremap ! !<c-g>u
    inoremap ? ?<c-g>u

" moving text
    nnoremap <C-j> :m .+1<CR>==
    nnoremap <C-k> :m .-2<CR>==
    vnoremap <C-j> :m '>+1<CR>gv=gv
    vnoremap <C-k> :m '<-2<CR>gv=gv

" }}}

" Splits {{{

" Fix splits
    set splitbelow splitright

" Vertical Split
    nnoremap <silent> <leader>f :vnew<CR>

" Horizontal Split
    nnoremap <silent> <leader>h :new<CR>

" Move windows
    nnoremap <A-h> <C-w>h
    nnoremap <A-j> <C-w>j
    nnoremap <A-k> <C-w>k
    nnoremap <A-l> <C-w>l

    inoremap <A-h> <C-\><C-N><C-w>h
    inoremap <A-j> <C-\><C-N><C-w>j
    inoremap <A-k> <C-\><C-N><C-w>k
    inoremap <A-l> <C-\><C-N><C-w>l

    tnoremap <A-h> <C-\><C-N><C-w>h
    tnoremap <A-j> <C-\><C-N><C-w>j
    tnoremap <A-k> <C-\><C-N><C-w>k
    tnoremap <A-l> <C-\><C-N><C-w>l

" resize windows
    nmap <silent> <S-left> :vertical resize -5<CR>
    nmap <silent> <S-right> :vertical resize +5<CR>
    nmap <silent> <S-up> :resize -5<CR>
    nmap <silent> <S-down> :resize +5<CR>

" }}}

" Note {{{

    " autocompile into pdf
    autocmd BufWritePost *.note silent !note2pdf %:p

    " syntax highlighting
    autocmd BufRead,BufNewFile *.note set filetype=markdown
    autocmd BufRead,BufNewFile *.note set syntax=markdown

    " enable spell
    autocmd BufRead,BufNewFile *.note set spell spelllang=en_us

    " enable goyo
    autocmd BufRead,BufNewFile *.note silent :Goyo

    " enable limelight
    autocmd BufRead,BufNewFile *.note silent :Limelight
" }}}

" Settings {{{

" fzf
    map <C-g> :Files<CR>
    map <C-f> :BLines<CR>

    let g:fzf_layout = { 'up': '~90%', 'window': { 'width': 0.8, 'height': 0.8, 'yoffset':0.5, 'xoffset': 0.5, 'highlight': 'Todo' } }

    let $FZF_DEFAULT_OPTS = '--layout=reverse --info=inline'
    let $FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'

    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['bg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" NERDTree
    nnoremap <silent> <expr> <Leader>. g:NERDTree.IsOpen() ? ':NERDTreeClose<CR>' : @% == '' ? ':NERDTree<CR>' : ':NERDTreeFind<CR>'
    autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" YCM
    nnoremap gr :YcmCompleter RefactorRename <C-r><C-w>
    nnoremap <silent> gd :YcmCompleter GoTo<CR>
    nnoremap <silent> gh :YcmCompleter GetDoc<CR>

    let g:ycm_autoclose_preview_window_after_insertion = 1

    augroup Format
        autocmd FileType c,cpp,go,rust
            \ autocmd! Format BufWritePost <buffer> :YcmCompleter Format
    augroup END

" emmet
    let g:user_emmet_mode='nv'
    let g:user_emmet_leader_key=','
    let g:user_emmet_settings = {
    \  'html' : {
    \    'block_all_childless' : 1,
    \  },
    \}

    inoremap ,, <ESC>:norm,,<CR>i

" goyo
    function! s:goyo_enter()
      let b:quitting = 0
      let b:quitting_bang = 0
      autocmd QuitPre <buffer> let b:quitting = 1
      cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!
    endfunction

    function! s:goyo_leave()
      " Quit Vim if this is the only remaining buffer
      if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        if b:quitting_bang
          qa!
        else
          qa
        endif
      endif
    endfunction

    autocmd! User GoyoEnter call <SID>goyo_enter()
    autocmd! User GoyoLeave call <SID>goyo_leave()

    nnoremap <silent> <Leader>g :Goyo<CR>

" limelight
    let g:limelight_conceal_ctermfg = 'darkgray'
    let g:limelight_paragraph_span = 1
    let g:limelight_priority = -1

" undotree
    nnoremap <silent> <C-z> :UndotreeToggle<CR>
    nnoremap <silent> <leader>z :UndotreeToggle<CR>

" commentary
    nnoremap <silent> <C-a> :Commentary<CR>
    vnoremap <silent> <C-a> :Commentary<CR>

" devicons
    let g:webdevicons_enable = 1
    let g:webdevicons_enable_airline_statusline = 1

" }}}

" vim:foldmethod=marker:foldlevel=0
